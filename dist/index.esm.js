const t=(t,r)=>(e,n)=>((t,r,e)=>{const n=t.slice(0,-1),s=t[t.length-1],o={...e};let c=o;for(;n.length;){const t=n.shift(),r=c[t],e=Array.isArray(r)?[...r]:{...r};c[t]=e,c=e}return c[s]=r,o})(r,((t,r)=>{const e=t.slice();let n=r[e.shift()];for(;e.length;)if(void 0===(n=n[e.shift()]))return;return n})(t,e),n),r=t=>(r,e)=>t.reduce((t,e)=>e(r,t),{...e}),e=e=>{const[n,s]=((t,r,e)=>{let n=Array.isArray(e)?[...e]:{...e};const s=(r,e=[])=>{if((t=>"object"!=typeof t||null===t)(r))n=t(n,e,r);else for(const t in r)s(r[t],e.concat(t))};return s(r),n})(([r,e],n,s)=>{if((t=>"string"==typeof t)(s)){const o=(t=>t.split("."))(s),c=n;r.push(t(o,c)),e.push(t(c,o))}return[r,e]},e,[[],[]]);return[r(n),r(s)]};export{t as buildArrow,r as bundleArrows,e as parseTranslationMap};
